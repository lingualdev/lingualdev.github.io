<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="en">
	<title>Lingual</title>
	<subtitle>Improving the i18n developer experience</subtitle>
	<link href="https://www.lingual.dev/feed/feed.xml" rel="self"/>
	<link href="https://www.lingual.dev/"/>
	<updated>2024-06-18T00:00:00Z</updated>
	<id>https://www.lingual.dev/</id>
	<author>
		<name></name>
		<email></email>
	</author>
	
	<entry>
		<title>Introducing i18n-check - Improving the i18n developer experience</title>
		<link href="https://www.lingual.dev/blog/introducing-i18n-check/"/>
		<updated>2024-06-18T00:00:00Z</updated>
		<id>https://www.lingual.dev/blog/introducing-i18n-check/</id>
		<content type="html">&lt;h2 id=&quot;introduction&quot; tabindex=&quot;-1&quot;&gt;Introduction &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.lingual.dev/blog/introducing-i18n-check/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We released &lt;a href=&quot;https://github.com/lingualdev/i18n-check?tab=readme-ov-file#examples&quot;&gt;&lt;code&gt;i18n-check&lt;/code&gt;&lt;/a&gt; to help with internalization efforts and support in finding &lt;strong&gt;untranslated&lt;/strong&gt; or &lt;strong&gt;invalid translation messages&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When working with libraries like &lt;a href=&quot;https://formatjs.io/docs/react-intl/&quot;&gt;&lt;code&gt;react-intl&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://react.i18next.com/&quot;&gt;&lt;code&gt;react-i18next&lt;/code&gt;&lt;/a&gt; you have the option to use &lt;strong&gt;extraction tools&lt;/strong&gt; to keep the default locale JSON file in sync with your codebase. One advantage of choosing an extraction tool is that every i18n related change (creating, updating or removing keys) is reflected in the JSON file. This JSON file is mostly the basis for all other languages. Removing a key in your base language should result in that key being removed in all other language files and so forth.&lt;/p&gt;
&lt;p&gt;Most popular libraries already offer one or more code parsers that can create a valid JSON file based on the current state of the code.
So while the base language can be up to date, &lt;strong&gt;the secondary languages&lt;/strong&gt; might not be. Additionally if you are not using a third party translation service, you might &lt;strong&gt;lack an overview of the current state of these secondary languages&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Questions like: &lt;em&gt;&amp;quot;How many keys are missing in the fr language file?&amp;quot;&lt;/em&gt; or &lt;em&gt;&amp;quot;Are all keys valid in the de file?&amp;quot;&lt;/em&gt; might require some work to figure out.&lt;/p&gt;
&lt;p&gt;As developers we don&#39;t want to actively think about the state of these translations and rather be informed when something is missing or needs updating.
This is what &lt;code&gt;i18n-check&lt;/code&gt; should help with, having &lt;strong&gt;a tool that tries to compare your secondary languages to the base language files&lt;/strong&gt; and inform about missing or broken/invalid translation keys.&lt;/p&gt;
&lt;h2 id=&quot;setting-up-i18n-check&quot; tabindex=&quot;-1&quot;&gt;Setting up i18n-check &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.lingual.dev/blog/introducing-i18n-check/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To setup &lt;code&gt;i18n-check&lt;/code&gt; run the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--dev&lt;/span&gt; @lingual/i18n-check&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively if you are using &lt;strong&gt;npm&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --save-dev @lingual/i18n-check&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or if you are using &lt;strong&gt;pnpm&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;pnpm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; --save-dev @lingual/i18n-check&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;i18n-check&lt;/code&gt; can either be accessed via defining a command in the &lt;code&gt;package.json&lt;/code&gt; file or directly in the CLI after running the installation command.&lt;/p&gt;
&lt;p&gt;Now update the &lt;code&gt;package.json&lt;/code&gt; file and add a new command:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...other commands,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;i18n:check&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;i18n-check&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run the &lt;code&gt;i18n:check&lt;/code&gt; command directly from the command-line, i.e. &lt;code&gt;yarn i18n:check&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Alternatively you can also access the library directly:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;node_modules/.bin/i18n-check&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;checking-against-your-files&quot; tabindex=&quot;-1&quot;&gt;Checking against your files &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.lingual.dev/blog/introducing-i18n-check/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once you have everything setup, you can run check commands against single files, single folders or a combination of files and/or folders. There are a number of possible check scenarios and these depend on how the localization files are structured in your codebase.&lt;/p&gt;
&lt;p&gt;To keep this post short, let&#39;s take a look at two possible scenarios (there are more advanced scenarios in the &lt;a href=&quot;https://github.com/lingualdev/i18n-check?tab=readme-ov-file#examples&quot;&gt;README&lt;/a&gt;). A basic setup could include a folder called &lt;em&gt;locales&lt;/em&gt; containing a number of translation files organized as &lt;code&gt;en-en.json&lt;/code&gt;, &lt;code&gt;fr-fr.json&lt;/code&gt;, &lt;code&gt;it-it.json&lt;/code&gt; etc:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;locales/
&lt;ul&gt;
&lt;li&gt;en-en.json&lt;/li&gt;
&lt;li&gt;fr-fr.json&lt;/li&gt;
&lt;li&gt;it-it.json&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can use the &lt;code&gt;-t&lt;/code&gt; or &lt;code&gt;--target&lt;/code&gt; option to define the directory that contains the target files and with the &lt;code&gt;-s&lt;/code&gt; or &lt;code&gt;--source&lt;/code&gt; option you can specify the base/reference file to compare the target files against.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; i18n:check &lt;span class=&quot;token parameter variable&quot;&gt;-t&lt;/span&gt; locales &lt;span class=&quot;token parameter variable&quot;&gt;-s&lt;/span&gt; locales/en-en.json&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above scenario the &lt;code&gt;i18n-check&lt;/code&gt; will compare the &lt;code&gt;fr-fr.json&lt;/code&gt; and &lt;code&gt;it-it.json&lt;/code&gt; file against the &lt;code&gt;en-en.json&lt;/code&gt; file and check for any missing or broken keys. Running the above command might return the following result:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://www.lingual.dev/img/PIE2-IvB7z-1221.avif 1221w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.lingual.dev/img/PIE2-IvB7z-1221.webp 1221w&quot;&gt;&lt;img alt=&quot;lingual-i18n-check example 1&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.lingual.dev/img/PIE2-IvB7z-1221.png&quot; width=&quot;1221&quot; height=&quot;588&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;i18n translations checker
Source file&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;: locales/en-en.json

Found missing keys&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;

In locales/fr-fr.json:

◯ richText
◯ yo
◯ nesting1
◯ nesting2
◯ nesting3
◯ key1

Found invalid keys&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;

In locales/it-it.json:

◯ multipleVariables

Done &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;.01s.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also use the &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--reporter&lt;/code&gt; option to see a summary of the check instead of single keys, this is especially useful if you do not want to list all the keys:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://www.lingual.dev/img/tIHotYuKhg-1222.avif 1222w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.lingual.dev/img/tIHotYuKhg-1222.webp 1222w&quot;&gt;&lt;img alt=&quot;lingual-i18n-check example 2&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.lingual.dev/img/tIHotYuKhg-1222.png&quot; width=&quot;1222&quot; height=&quot;499&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;i18n translations checker
Source file&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;: locales/en-en.json

Found missing keys&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;

In locales/fr-fr.json:

Found &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; missing keys.

Found invalid keys&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;

In locales/it-it.json:

Found &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; invalid key.

Done &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;.01s.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your files might also be organized as one folder per locale, similar to this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;locales/
&lt;ul&gt;
&lt;li&gt;en-US/
&lt;ul&gt;
&lt;li&gt;one.json&lt;/li&gt;
&lt;li&gt;two.json&lt;/li&gt;
&lt;li&gt;three.json&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;de-DE/
&lt;ul&gt;
&lt;li&gt;one.json&lt;/li&gt;
&lt;li&gt;two.json&lt;/li&gt;
&lt;li&gt;three.json&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For this scenario you can define the &lt;code&gt;locales&lt;/code&gt; folder as the &lt;code&gt;target&lt;/code&gt; directory to look for target files in and pass &lt;code&gt;locales/en-US/&lt;/code&gt; as the &lt;code&gt;source&lt;/code&gt; option. &lt;code&gt;i18n-check&lt;/code&gt; will try to collect all the files in the provided base directory and compare each one against the corresponding files in the target locales.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; i18n:check &lt;span class=&quot;token parameter variable&quot;&gt;-t&lt;/span&gt; locales &lt;span class=&quot;token parameter variable&quot;&gt;-s&lt;/span&gt; locales/en-US/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above command would then compare the &lt;code&gt;locales/de-DE/one.json&lt;/code&gt; with the &lt;code&gt;locales/en-US/one.json&lt;/code&gt; and check for any missing or invalid keys.&lt;/p&gt;
&lt;p&gt;If you your localization setup is different to the two shown examples, you can check the &lt;a href=&quot;https://github.com/lingualdev/i18n-check?tab=readme-ov-file#examples&quot;&gt;examples section in the README&lt;/a&gt; for more advanced scenarios.&lt;/p&gt;
&lt;p&gt;There are also a number of further &lt;strong&gt;options&lt;/strong&gt; you can use to configure the check even further. For example you can only check for missing keys or only check for broken/invalid translations via the &lt;code&gt;--check&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;There are situations where we want to exclude specific files or folders: this can be done via the &lt;code&gt;--exclude&lt;/code&gt; option. For a more detailed explanation of the available options consult the &lt;a href=&quot;https://github.com/lingualdev/i18n-check?tab=readme-ov-file#options&quot;&gt;options section in the README&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;usage&quot; tabindex=&quot;-1&quot;&gt;Usage &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.lingual.dev/blog/introducing-i18n-check/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are multiple ways to incorporate &lt;code&gt;i18n-check&lt;/code&gt; into your existing workflow. You can run the checks manually on the &lt;strong&gt;CLI&lt;/strong&gt; or add it as &lt;strong&gt;pre-commit hook&lt;/strong&gt;. Further more you can also let it run on the &lt;strong&gt;CI&lt;/strong&gt;, the following is an example of how you could define the Github workflow:&lt;/p&gt;
&lt;pre class=&quot;language-yml&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; i18n Check
&lt;span class=&quot;token key atrule&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; main
  &lt;span class=&quot;token key atrule&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; main

&lt;span class=&quot;token key atrule&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;i18n-check&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest

    &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/checkout@master

      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; yarn install &amp;amp; build
        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;
          yarn install
          yarn build&lt;/span&gt;

      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; yarn i18n&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;check
        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;
          yarn i18n-check -t translations/messageExamples -s translations/messageExamples/en-us.json&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;i18n-check&lt;/code&gt; also offers an &lt;strong&gt;API&lt;/strong&gt; you can directly use if you want to trigger these checks programmatically or if you want to build your own wrapper around the checks.&lt;/p&gt;
&lt;h2 id=&quot;summary&quot; tabindex=&quot;-1&quot;&gt;Summary &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.lingual.dev/blog/introducing-i18n-check/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is the initial release of &lt;code&gt;i18n-checks&lt;/code&gt; and we have some more plans, including creating a &lt;strong&gt;vs code plugin&lt;/strong&gt;, so you can run the checks directly inside your IDE and even get some visual feedback on the state of your translations.&lt;/p&gt;
&lt;p&gt;Currently the checks only cover &lt;code&gt;icu&lt;/code&gt; and &lt;code&gt;i18next&lt;/code&gt; messages, adding &lt;code&gt;GET&lt;/code&gt; file checks is another todo we are planning to work on.&lt;/p&gt;
&lt;p&gt;Aside from the aforementioned, we will try to fix any missing scenarios in regards to real world localization setups. We encourage to give &lt;code&gt;i18n-check&lt;/code&gt; a try and see if the checks can help improve your localization efforts, especially if you are not using a third party saas solution for the translation part (as these often come with helpful information in regards to the state of your localization efforts).&lt;/p&gt;
&lt;p&gt;Checkout &lt;code&gt;i18n-check&lt;/code&gt; &lt;a href=&quot;https://github.com/lingualdev/i18n-check&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;links&quot; tabindex=&quot;-1&quot;&gt;Links &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.lingual.dev/blog/introducing-i18n-check/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/lingualdev/i18n-check&quot;&gt;i18n-check&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/lingualdev&quot;&gt;Twitter&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
</feed>
