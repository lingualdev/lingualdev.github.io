{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "Lingual",
	"language": "en",
	"home_page_url": "https://www.lingual.dev/",
	"feed_url": "https://www.lingual.dev/feed/feed.json",
	"description": "Improving the i18n developer experience",
	"author": {
		"name": "",
		"url": "https://lingual.dev"
	},
	"items": [
		{
			"id": "https://www.lingual.dev/blog/checklist-for-your-i18n-efforts-part-2.html",
			"url": "https://www.lingual.dev/blog/checklist-for-your-i18n-efforts-part-2.html",
			"title": "An almost complete checklist for your i18n efforts Part 2",
			"content_html": "<h2 id=\"introduction\" tabindex=\"-1\">Introduction <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/checklist-for-your-i18n-efforts-part-2.html\">#</a></h2>\n<p>This is the second part of the checklist to support your 18n efforts, you can also checkout <a href=\"https://lingual.dev/blog/checklist-for-your-i18n-efforts-part-1.html\">part 1 here</a> in case you haven't read it.</p>\n<p>The first part focused on a wide range of topics including choosing the right library, providing context, design aspects, pluralization and more. The second part will continue covering more aspects like <strong>right-to-left languages</strong>, <strong>testing and validating your localization</strong>, <strong>unicode</strong>, <strong>device sizes</strong> and <strong>conditional text and grammar</strong>.</p>\n<p>It's always a good idea to consider a wide range of angles when approaching internalionalization as it is more than just simple string translations.</p>\n<h2 id=\"testing-and-validating-your-localization\" tabindex=\"-1\">Testing and validating your localization <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/checklist-for-your-i18n-efforts-part-2.html\">#</a></h2>\n<p>To ensure that your application does not break when working with different languages, there are a couple of possible approaches you can choose from.</p>\n<p>If you don't want to test specific regions or translations, there is an option to <strong>test different text lengths</strong> by randomizing the text. This can help to ensure that different word lengths do not break the layout.</p>\n<p>For a more qualitative approach, you can have native speakers <strong>manually test the application</strong> and collect the feedback based on these tests. This a more intensive approach which also can't be automated, but can provide very valuable and deep insights when rolling out the application to a new region.</p>\n<p>The third approach is to use <strong>checkers and linters</strong>. These can help to identify missing keys in specific translations files. Further more some checkers can also identify broken translations. You can run these linters/checkers locally while developing features and/or run them on the CI and get notfied when something is broken. In general these tools can be very helpful to understand the state of the translations when you are not using any translation management system.</p>\n<p>Finally you can also run automated tests against specific languages in your app, these tests can range from UI tests that verify specific strings exist to more advanced approaches like visual regression testing.</p>\n<p>You can also checkout <a href=\"https://github.com/lingualdev/i18n-check\">i18n-check</a> if you are using <code>react-intl</code> or <code>react-i18next</code> to verify your translations.</p>\n<pre class=\"language-txt\" tabindex=\"0\"><code class=\"language-txt\">Tip: It's a good idea to research what tools are available for your programming\nlanuage and/or framework first and then mix different approaches and see what\nyields the best results.</code></pre>\n<h2 id=\"right-to-left-languages\" tabindex=\"-1\">Right-to-left languages <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/checklist-for-your-i18n-efforts-part-2.html\">#</a></h2>\n<p>There are cases where we might need to <strong>support right-to-left languages</strong>, which means that we not only need to consider that the direction of the text changes but also that user interface elements might have to be adapted and made suitable as well.</p>\n<p>So right-to-left languages need to be thought about on the user interface level not only on the actual translation level. This also implies to think about the required adaptions needed in regards to the UI elements (i.e. buttons, sliders etc.) in the design phase. Additionally these design and layout adaptions should also be ensured through UI testing and other quality assurance tools.</p>\n<pre class=\"language-txt\" tabindex=\"0\"><code class=\"language-txt\">Tip: Consider right-to-left languages, as these not only need to be translated\nbut also might require visual adaptions to the user interface!</code></pre>\n<h2 id=\"unicode\" tabindex=\"-1\">Unicode <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/checklist-for-your-i18n-efforts-part-2.html\">#</a></h2>\n<p>This tip is a short one, always use <strong>Unicode (UTF-8)</strong> encoding to ensure that your translations are displayed correctly independent of the selected locale.\nWe will be writing a more detailed blog post on Unicode soon.</p>\n<pre class=\"language-txt\" tabindex=\"0\"><code class=\"language-txt\">Tip: Use Unicode (UTF-8) encoding!</code></pre>\n<h2 id=\"device-sizes\" tabindex=\"-1\">Device sizes <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/checklist-for-your-i18n-efforts-part-2.html\">#</a></h2>\n<p>Depending on the range of devices we want to support, it can be a good strategy to verify how the word length and device size fit together. Do specific sentences break the user interface given a specific width or height? We need to ensure that the UI remains consistent.</p>\n<pre class=\"language-txt\" tabindex=\"0\"><code class=\"language-txt\">Tip: Consider device sizes and how these might affect the translations.\nCheck if word length in a specific locale breaks the layout.\nTry to adapt the user interface to the different device sizes you want to support.</code></pre>\n<h2 id=\"conditional-text-and-grammar\" tabindex=\"-1\">Conditional text and grammar <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/checklist-for-your-i18n-efforts-part-2.html\">#</a></h2>\n<p>One common mistake is to assume that the structure of a sentence can be replicated over different locales. This would imply that we can break up a sentence into multiiple parts and concatenate them in the code.</p>\n<p>This is problematic, as first we can not guarantee that the selected target language follows the implied order defined in the code and second, it's very hard for the translator to understand and control the sentence.</p>\n<p>Let's see an example to get a better understanding.</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token string\">\"Welcome,\"</span>  name <span class=\"token operator\">+</span> <span class=\"token string\">\"!\"</span></code></pre>\n<p>The above example would break the string into three parts and assume the structure will work for all locales</p>\n<p>A better way is to <strong>use full sentences and work with placeholders</strong>. The advantage is that the translator now has a full understanding of the sentence and can change the ordering of the words themselves. This approach brings back the flexibility needed to adapt to specific locale requirements.</p>\n<p>So the above example would be refactored to a single sentence with a placholder <code>name</code>:</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token string\">\"Welcome, {name}!\"</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Now the translator can adapt the structure as needed when translating the source string into a target locale. Also, if there are placeholders in place, more information about the placeholder should be provided the translator. This helps to gain an understanding for what the placeholder stands and how to incorporate it into the target language.</p>\n<pre class=\"language-txt\" tabindex=\"0\"><code class=\"language-txt\">Tip: Try to keep full sentences intact and only break them up if there is a good reason.\nAdditionally use placeholders for things that don't rely on pluralization, gender or number\nand might change due to the aforementioned!\n</code></pre>\n<h2 id=\"more-aspects-to-consider\" tabindex=\"-1\">More aspects to consider <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/checklist-for-your-i18n-efforts-part-2.html\">#</a></h2>\n<p>There are a lot more topics to consider when planning to internationalize your app or website, for example:</p>\n<ul>\n<li>\n<p><strong>Consider to separte text from images</strong>: simplifies the translation process when updating the text. Otherwise if the image contains text, that text will be needed to be updated to the target locale(s).</p>\n</li>\n<li>\n<p><strong>Selecting a translation management system</strong>: there might be a need to use a management system to handle the translations. Depending on the situation and complexity of your setup, these tools can range from only updating the translations to handling complex workflows with multiple roles (translators, admins etc.)</p>\n</li>\n<li>\n<p><strong>Using machine translations</strong>: These can help to get some basic translations in place, that can be refined in a further step.</p>\n</li>\n<li>\n<p><strong>Accessibility</strong>: The topic is bigger than i18n, but also good to consider and keep in mind when following an internationalization strategy.</p>\n</li>\n</ul>\n<p>These were some further examples to highlight the complexity of the i18n topic.</p>\n<h2 id=\"outro\" tabindex=\"-1\">Outro <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/checklist-for-your-i18n-efforts-part-2.html\">#</a></h2>\n<p>That was the second and final part of our <strong>two part checklist series</strong>. In general we should have a better understanding and overview about what to consider when planning to introduce i18n into an application.</p>\n<p>If you have any questions or want to leave some feedback, you can find us on <a href=\"https://twitter.com/lingualdev\">Twitter</a>.</p>\n",
			"date_published": "2024-07-19T00:00:00Z"
		}
		,
		{
			"id": "https://www.lingual.dev/blog/checklist-for-your-i18n-efforts-part-1.html",
			"url": "https://www.lingual.dev/blog/checklist-for-your-i18n-efforts-part-1.html",
			"title": "An almost complete checklist for your i18n efforts Part 1",
			"content_html": "<h2 id=\"introduction\" tabindex=\"-1\">Introduction <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/checklist-for-your-i18n-efforts-part-1.html\">#</a></h2>\n<p>More often than not, we start to think about internationalization once <strong>the application is already in production</strong>. The need for i18n could arise due to market expansion for example and thought and energy need to be invested in making the application multi language capable.\nThis can be a challenging task and the potential for overseeing some aspects is real.\nWe want to avoid scenarios that render our internationalization efforts ineffective. See the following as a <strong>possible checklist</strong> or a starting point to get an overview of what you might want to consider before starting any initiative.</p>\n<p>This is <strong>not meant to be a complete checklist</strong> obviously, but rather a basic entry point in what you might want to give some thought on and extend with your specific situation (i.e. programming language, framework, domain specific boundaries etc.)</p>\n<h2 id=\"using-an-i18n-library\" tabindex=\"-1\">Using an i18n library <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/checklist-for-your-i18n-efforts-part-1.html\">#</a></h2>\n<p>Localization is more than just simply replacing a couple of strings, it requires us to think about aspects like date and time, numbers, pluralization, grammar and many more locale specific requirements. We want to customize all aspects of an application to the local market we are targeting, so <strong>it's not just replacing strings</strong>.\nAlmost every modern language and/or framework either offers built-in i18n support or there is a library that is optimized for said language/framework.</p>\n<p>Research possible alternatives and ensure that the selected library supports pluralization and number/date/time formatting. For example in <code>react</code> the two most popular libraries, <code>react-i18next</code> and <code>react-intl</code>, support most i18n aspects by default.</p>\n<pre class=\"language-txt\" tabindex=\"0\"><code class=\"language-txt\">Tip: Don't build your own i18n library, use existing, supported and tested solutions.\nLet the library take care of currencies, date/time, numbers and pluralizations.</code></pre>\n<h2 id=\"defining-a-localization-strategy\" tabindex=\"-1\">Defining a localization strategy <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/checklist-for-your-i18n-efforts-part-1.html\">#</a></h2>\n<p>Decide if you want to define message ids and default translations in code first and then extract these keys into locale files or if you want to always update the locale files first and then update the codebase depending on these locale files.</p>\n<p>There is a current trend to also use <strong>TypeScript</strong> for the message id validation, where the compiler will complain if you use a non-existent message id and also leverage autocomplete/intelliSense when filling out the ids. The second approach would makes this flow possible.</p>\n<p>On a side-note it might not be that important to use TypeScript for validating message id correctness as there are linters and checkers that can help ensuring the codebase and the locale files are in sync.</p>\n<pre class=\"language-txt\" tabindex=\"0\"><code class=\"language-txt\">Tip: Decide if you want to apply i18n in code first or locale files first.\nDefine if the keys should be extracted from the codebase or if the locales files are updated first and then the keys applied to the codebase.</code></pre>\n<h2 id=\"design\" tabindex=\"-1\">Design <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/checklist-for-your-i18n-efforts-part-1.html\">#</a></h2>\n<p>Although the design aspect of an application can feel detached from the translation process, they are actually more intertwined than we want to believe. Just think about the length of some word in English vs another language. Some languages use more characters for the same word.\nLet's take the word <code>skating</code> in English, it translates to <code>Schlittschuhlaufen</code> in German. We can do the same with sentences that we translate from English to German or another language, which can significantly vary in length.</p>\n<p><strong>The length of a sentence or string can vary</strong>.</p>\n<p>This means we should consider to leave some room for the strings to expand depending on the selected language. The space can be calculated dynamically and expand on demand or we can leave some fixed space, that can be filled out.\nNo matter what strategy we use, we should keep the varying string length in mind when designing the user interface. Taking this approach prevents strings from suddenly overlapping each other and other issues that can make your app feel broken, we want to avoid that.</p>\n<pre class=\"language-txt\" tabindex=\"0\"><code class=\"language-txt\">Tip: Keep in mind that strings can vary in length.\nDepending on the locale when designing the user interface!</code></pre>\n<h2 id=\"pluralization\" tabindex=\"-1\">Pluralization <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/checklist-for-your-i18n-efforts-part-1.html\">#</a></h2>\n<p>At first you might think that pluralization is defining a <strong>singular</strong> and <strong>plural</strong> form. This works for the English language. But if you take a closer look at the <a href=\"https://cldr.unicode.org/index/cldr-spec/plural-rules\">The Unicode Common Locale Data Repository (CLDR) </a> plural rules, there are six defined forms:</p>\n<ul>\n<li>\n<p>zero</p>\n</li>\n<li>\n<p>one (singular)</p>\n</li>\n<li>\n<p>two (dual)</p>\n</li>\n<li>\n<p>few (paucal)</p>\n</li>\n<li>\n<p>many</p>\n</li>\n<li>\n<p>other (required—general plural form)</p>\n</li>\n</ul>\n<p>This means we can't just do a simple check for singular and plural but need to accustom to the locale. Most i18n libraries account for this and can handle pluralization correctly.</p>\n<pre class=\"language-txt\" tabindex=\"0\"><code class=\"language-txt\">Tip: Use an internationalization library to handle pluralization!\nAvoid hardcoding any checks to show singular or plural forms.</code></pre>\n<h2 id=\"currencies-units-time-date-and-number-formatting\" tabindex=\"-1\">Currencies, units, time, date and number formatting <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/checklist-for-your-i18n-efforts-part-1.html\">#</a></h2>\n<p>There is a lot more than simple string translations that we need to consider when localzing an application. Just think about aspects like <strong>time and date formatting</strong>. What we want is to ensure that our <strong>i18n efforts reflect the selected end user locale</strong>.\nThe most common approach is to avoid codifying any numbers, dates, time etc. and rather use a library to do that conversion for us by for example passing date and time in ISO format. Commonly you will find libraries for your language or framework that offer functionalities or components to do the heavyweight lifting.</p>\n<pre class=\"language-txt\" tabindex=\"0\"><code class=\"language-txt\">Tip: Use an internationalization library to handle any units, time/dates, numbers or currencies formatting!\nAvoid hardcoding units, time/dates, numbers or currencies.</code></pre>\n<h2 id=\"ensure-context\" tabindex=\"-1\">Ensure context <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/checklist-for-your-i18n-efforts-part-1.html\">#</a></h2>\n<p>While as a developer you might have enough context in regards to a translated string, this might not be the case for an external translator or anyone without access to the code in general.\n<strong>The same string can have a different translation depending on the context</strong>. We want keep this in mind and not lose the information once the translation is decoupled from the code base.\nAdding context in the resource file can help a translator to understand where the translation is happening in the user interface. Context can be provided via using meta information or screenshots f.e.\nDepending on the message format, there are defined ways to leave meta information associated with a message id.</p>\n<pre class=\"language-txt\" tabindex=\"0\"><code class=\"language-txt\">Tip: Add context to your translation keys in the resource files!\nThis ensures that context specific information is not lost during the developer/translator handover.</code></pre>\n<h2 id=\"outro\" tabindex=\"-1\">Outro <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/checklist-for-your-i18n-efforts-part-1.html\">#</a></h2>\n<p>In part two we will expand the checklist and talk about topics like <strong>right-to-left languages</strong>, <strong>device sizes</strong>, <strong>testing and validating your localization</strong>, <strong>unicode</strong> and <strong>conditional text and grammar</strong>.</p>\n<p>Update: <strong>Part 2</strong> has been published is available <a href=\"https://www.lingual.dev/blog/checklist-for-your-i18n-efforts-part-2.html\">here</a></p>\n<p>If you have any questions or want to leave some feedback, you can find us on <a href=\"https://twitter.com/lingualdev\">Twitter</a>.</p>\n",
			"date_published": "2024-07-06T00:00:00Z"
		}
		,
		{
			"id": "https://www.lingual.dev/blog/making-your-translation-keys-type-safe-in-react-typescript/",
			"url": "https://www.lingual.dev/blog/making-your-translation-keys-type-safe-in-react-typescript/",
			"title": "Making your translation keys type-safe in React",
			"content_html": "<h2 id=\"introduction\" tabindex=\"-1\">Introduction <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/making-your-translation-keys-type-safe-in-react-typescript/\">#</a></h2>\n<p>With <strong>TypeScript</strong> being the de-facto standard way to write <strong>React</strong> applications it only makes sense to expand the <strong>type-safety</strong> to our translations, specifically our translation keys.</p>\n<p>No matter if you are using one of the popular <strong>i18n</strong> libraries like <a href=\"https://react.i18next.com/\">react-i18next</a> or <a href=\"https://formatjs.io/docs/react-intl/#the-react-intl-package\">react-intl</a> or other internationalisation packages, you will probably want to explore how useful expanding type-checking to translation keys can be.</p>\n<p>While most modern libraries already offer TypeScript support for setting up the library as well as interacting with the API, the translation keys themselves are often typed as a simple <code>string</code> type. This approach makes sense, as in most cases you will be adding new keys, not using existing ones. But there are scenarios where leveraging TypeScript to make your keys type-safe is still a benefit.</p>\n<p>Depending on your setup there can be situations where catching incorrect or missing keys before they reach production can be achieved by making them type-safe, as opposed to using <strong>validation libraries</strong> or <strong>linters</strong>. Aside from that, a side-effect of type-safety is improved <strong>autocomplete/intellisense capabilities</strong>.</p>\n<p>With that being said, one should also consider some limitations and issues that can arise from this approach. It requires to have the <strong>message files up to date</strong>, meaning the keys and translations have to already exist in your locale files, otherwise TypeScript will keep complaining about non-existent keys.</p>\n<p>In other words, if you create the <strong>message IDs</strong> and <strong>default translations</strong> in your code via i18n specific components (i.e. <code>FormatMessage</code>) or functions (i.e. <code>formatMessage</code> or <code>t</code>), and then create the locale files via an extraction script based on that code, then the type-safe keys approach is suboptimal. This is where tools like linters or checkers running as a pre-commit hook or on the CI are preferable.</p>\n<p>This write-up will go through the setup for two popular libraries in React-land: <code>react-i18next</code> and <code>react-intl</code>. As a side-note: if you have a specific library that could use TypeScript support, don't hesitate to let us know on <a href=\"https://twitter.com/lingualdev\">Twitter</a>, we might write a follow-up on the topic if there is enough interest.</p>\n<h2 id=\"making-your-translation-keys-type-safe\" tabindex=\"-1\">Making your translation keys type-safe <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/making-your-translation-keys-type-safe-in-react-typescript/\">#</a></h2>\n<p>The following sections are mainly for existing users of either <code>react-i18next</code> or <code>react-intl</code> as we will not talk about how to set up these libraries, but only focus on the actual setup to make translation keys type-safe.</p>\n<h2 id=\"type-safe-translation-keys-in-react-i18next\" tabindex=\"-1\">Type-safe translation keys in react-i18next <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/making-your-translation-keys-type-safe-in-react-typescript/\">#</a></h2>\n<p>The first thing we need to do according to the <a href=\"https://www.i18next.com/overview/typescript\">documentation</a> is to add a <code>i18next.d.ts</code> file, as we will need to augment the TypeScript definition:</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"i18next\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> ns1 <span class=\"token keyword\">from</span> <span class=\"token string\">\"locales/en/ns1.json\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ns2 <span class=\"token keyword\">from</span> <span class=\"token string\">\"locales/en/ns2.json\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"i18next\"</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CustomTypeOptions</span> <span class=\"token punctuation\">{</span>\n\t\tdefaultNS<span class=\"token operator\">:</span> <span class=\"token string\">\"ns1\"</span><span class=\"token punctuation\">;</span>\n\t\tresources<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\tns1<span class=\"token operator\">:</span> <span class=\"token keyword\">typeof</span> ns1<span class=\"token punctuation\">;</span>\n\t\t\tns2<span class=\"token operator\">:</span> <span class=\"token keyword\">typeof</span> ns2<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// ...</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Alternatively we can also create an <code>i18n.ts</code> file to initialize <code>i18next</code> and prepare the resources:</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> i18n <span class=\"token keyword\">from</span> <span class=\"token string\">\"i18next\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> initReactI18next <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-i18next\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> ns1 <span class=\"token keyword\">from</span> <span class=\"token string\">\"./locales/en/ns1.json\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ns2 <span class=\"token keyword\">from</span> <span class=\"token string\">\"./locales/en/ns2.json\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> defaultNS <span class=\"token operator\">=</span> <span class=\"token string\">\"ns1\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> resources <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tns1<span class=\"token punctuation\">,</span>\n\tns2<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\ni18n<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>initReactI18next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\tdebug<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\tfallbackLng<span class=\"token operator\">:</span> <span class=\"token string\">\"en\"</span><span class=\"token punctuation\">,</span>\n\tdefaultNS<span class=\"token punctuation\">,</span>\n\tresources<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Now we can directly import <code>i18n.ts</code> in our <code>i18-next.d.ts</code> file:</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> defaultNS<span class=\"token punctuation\">,</span> resources <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./i18n\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"i18next\"</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CustomTypeOptions</span> <span class=\"token punctuation\">{</span>\n\t\tdefaultNS<span class=\"token operator\">:</span> <span class=\"token keyword\">typeof</span> defaultNS<span class=\"token punctuation\">;</span>\n\t\tresources<span class=\"token operator\">:</span> <span class=\"token keyword\">typeof</span> resources<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Note that there is a <a href=\"https://www.i18next.com/overview/typescript#custom-type-options\">list of available custom type options</a> we can override under the <code>CustomTypeOptions</code> in the newly created <code>i18next.d.ts</code> file.</p>\n<p>This change enables us now to use the <code>t</code> function in a way, that we can only access keys that already exist in our internationalisation files:</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://www.lingual.dev/img/pgYte229A8-801.avif 801w\"><source type=\"image/webp\" srcset=\"https://www.lingual.dev/img/pgYte229A8-801.webp 801w\"><img alt=\"i18next t function autocomplete\" loading=\"lazy\" decoding=\"async\" src=\"https://www.lingual.dev/img/pgYte229A8-801.png\" width=\"801\" height=\"326\"></picture></p>\n<p>The same goes for the <code>&lt;Trans&gt;</code> component, which now checks that the provided <code>i18nKey</code> is an existing key and otherwise will error:</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://www.lingual.dev/img/9CqME-uDDL-801.avif 801w\"><source type=\"image/webp\" srcset=\"https://www.lingual.dev/img/9CqME-uDDL-801.webp 801w\"><img alt=\"i18next trans component autocomplete\" loading=\"lazy\" decoding=\"async\" src=\"https://www.lingual.dev/img/9CqME-uDDL-801.png\" width=\"801\" height=\"282\"></picture></p>\n<p>Also <code>useTranslation</code> will only accept valid namespaces from here on out:</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://www.lingual.dev/img/jrcaW4ccDI-800.avif 800w\"><source type=\"image/webp\" srcset=\"https://www.lingual.dev/img/jrcaW4ccDI-800.webp 800w\"><img alt=\"i18next namespace autocomplete\" loading=\"lazy\" decoding=\"async\" src=\"https://www.lingual.dev/img/jrcaW4ccDI-800.png\" width=\"800\" height=\"287\"></picture></p>\n<p>Should you still run into some issues when trying to set up the TypeScript support, the <a href=\"https://www.i18next.com/overview/typescript#troubleshooting\">documentation has a troubleshooting section</a></p>\n<h2 id=\"type-safe-translation-keys-in-react-intl\" tabindex=\"-1\">Type-safe translation keys in react-intl <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/making-your-translation-keys-type-safe-in-react-typescript/\">#</a></h2>\n<p>Adding support for typed message IDs in <code>react-intl</code> can be achieved by following the <a href=\"https://formatjs.io/docs/react-intl/#typing-message-ids-and-locale\">documentation</a>.\nTo change the standard <code>string</code> type for message keys to a more restrictive type we need to override the global <code>FormatjsIntl</code> namespace.\nWe can create a file called <code>react-intl.d.ts</code> and add the following code:</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> messages<span class=\"token punctuation\">,</span> <span class=\"token constant\">LOCALES</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./i18n/messages\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> defaultMessages <span class=\"token operator\">=</span> messages<span class=\"token punctuation\">[</span><span class=\"token constant\">LOCALES</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ENGLISH</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">declare</span> global <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">namespace</span> FormatjsIntl <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Message</span> <span class=\"token punctuation\">{</span>\n\t\t\tids<span class=\"token operator\">:</span> <span class=\"token keyword\">keyof</span> <span class=\"token keyword\">typeof</span> defaultMessages<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>We are using <code>defaultMessages</code> here, as we are interested in the existing keys in the default language. Technically any object containing messages that we can also pass to the <code>IntlProvider</code> is valid.</p>\n<p>By overriding the <code>FormatjsIntl</code> namespace, we can leverage autocomplete/intellisense and error checking inside our codebase. This works for both the <code>&lt;FormattedMessage&gt;</code> component as well as the <code>formatMessage</code> function, which now only accept an <code>id</code> property that also exists in the messages object.</p>\n<p>We now have autocomplete for all existing messages:</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://www.lingual.dev/img/V8zU_Xl9ez-801.avif 801w\"><source type=\"image/webp\" srcset=\"https://www.lingual.dev/img/V8zU_Xl9ez-801.webp 801w\"><img alt=\"react-intl autocomplete\" loading=\"lazy\" decoding=\"async\" src=\"https://www.lingual.dev/img/V8zU_Xl9ez-801.png\" width=\"801\" height=\"401\"></picture></p>\n<p>TypeScript will complain if the message ID does not exist:</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://www.lingual.dev/img/FYiWyswYPi-802.avif 802w\"><source type=\"image/webp\" srcset=\"https://www.lingual.dev/img/FYiWyswYPi-802.webp 802w\"><img alt=\"react-intl TypeScript error\" loading=\"lazy\" decoding=\"async\" src=\"https://www.lingual.dev/img/FYiWyswYPi-802.png\" width=\"802\" height=\"338\"></picture></p>\n<h2 id=\"summary\" tabindex=\"-1\">Summary <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/making-your-translation-keys-type-safe-in-react-typescript/\">#</a></h2>\n<p>Adding TypeScript for validating against incorrect or missing keys can be a useful strategy if your message keys are defined outside the React code and then referenced via an <code>id</code> property. Not only does this enable capabilities like autocomplete, it also helps to catch non-existent or wrong key names before they land in production.</p>\n<p>If your internationalisation workflow is based on creating the keys directly in the code and then extracting them from that code, using linters or checkers might be more useful. TypeScript will complain about invalid keys, but these keys might be extracted or updated in the message files at a different point in time, i.e. as a pre-commit hook.</p>\n<p>If you have any questions or want to leave some feedback, you can find us on <a href=\"https://twitter.com/lingualdev\">Twitter</a>.</p>\n<h2 id=\"links\" tabindex=\"-1\">Links <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/making-your-translation-keys-type-safe-in-react-typescript/\">#</a></h2>\n<p><a href=\"https://formatjs.io/docs/react-intl/#typing-message-ids-and-locale\">react-intl: typing message IDs and locale</a></p>\n<p><a href=\"https://www.i18next.com/overview/typescripts\">i18next: TypeScript</a></p>\n",
			"date_published": "2024-06-27T00:00:00Z"
		}
		,
		{
			"id": "https://www.lingual.dev/blog/introducing-i18n-check/",
			"url": "https://www.lingual.dev/blog/introducing-i18n-check/",
			"title": "Introducing i18n-check - Improving the i18n developer experience",
			"content_html": "<h2 id=\"introduction\" tabindex=\"-1\">Introduction <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/introducing-i18n-check/\">#</a></h2>\n<p>We released <a href=\"https://github.com/lingualdev/i18n-check?tab=readme-ov-file#examples\"><code>i18n-check</code></a> to help with internationalization efforts and support in finding <strong>untranslated</strong> or <strong>invalid translation messages</strong>.</p>\n<p>When working with libraries like <a href=\"https://formatjs.io/docs/react-intl/\"><code>react-intl</code></a> or <a href=\"https://react.i18next.com/\"><code>react-i18next</code></a> you have the option to use <strong>extraction tools</strong> to keep the default locale JSON file in sync with your codebase. One advantage of choosing an extraction tool is that every i18n related change (creating, updating or removing keys) is reflected in the JSON file. This JSON file is the basis for all other languages. Removing a key in your base language should result in that key being removed in all other languages as well.</p>\n<p>Most popular libraries already offer one or more code parsers that can create a valid JSON file based on the current state of the code.\nSo while the base language can be up-to-date, <strong>the secondary languages</strong> might not be. Additionally if you are not using a third party translation service, you might <strong>lack an overview of the current state of these secondary languages</strong>.</p>\n<p>Questions like: <em>&quot;How many keys are missing in the <code>fr</code> language file?&quot;</em> or <em>&quot;Are all keys valid in the <code>de</code> file?&quot;</em> require a lot of work to figure out.</p>\n<p>Missing keys are clear enough to understand, as they either exist in the target language files or not. When it comes to <strong>invalid/broken keys</strong> the situation can be more complex. Potential situations where the key could be in an invalid state can occur when dealing with time or date formats, translations including currency, pluralisation or translations containing tags.</p>\n<p>Take the following translations for example:</p>\n<pre class=\"language-json\" tabindex=\"0\"><code class=\"language-json\"><span class=\"token comment\">// en.json</span>\n<span class=\"token property\">\"message.greeting\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hi, &lt;b>{name}&lt;/b>!\"</span>\n\n<span class=\"token comment\">// de.json</span>\n<span class=\"token property\">\"message.greeting\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hallo {name}!\"</span></code></pre>\n<p>The message in the <strong>de.json</strong> file does not contain any tags, while the default language does. They might have been removed during the translation process or were never added in the first place.</p>\n<pre class=\"language-json\" tabindex=\"0\"><code class=\"language-json\"><span class=\"token comment\">// en.json</span>\n<span class=\"token property\">\"message.greeting\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hi {user}, it is {today, date, medium}.\"</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">// de.json</span>\n<span class=\"token property\">\"message.greeting\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hallo {user}, heute ist {today, date, medium} und morgen ist {tomorrow, date, medium}.\"</span><span class=\"token punctuation\">,</span></code></pre>\n<p>In the second example the target translation contains more date information as compared to the source <strong>en.json</strong> file, which could mean that the source and target translations might be out of sync.</p>\n<p>The check should inform of potential issues in this case.</p>\n<p>As developers we don't want to actively think about the state of these translations and rather be informed when something is missing or needs updating.\nThis is what <code>i18n-check</code> should help with, having <strong>a tool that tries to compare your secondary languages to the base language files</strong> and inform about missing or broken/invalid translation keys.</p>\n<h2 id=\"setting-up-i18n-check\" tabindex=\"-1\">Setting up i18n-check <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/introducing-i18n-check/\">#</a></h2>\n<p>To setup <code>i18n-check</code> run the following command:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">--dev</span> @lingual/i18n-check</code></pre>\n<p>Alternatively if you are using <strong>npm</strong>:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev @lingual/i18n-check</code></pre>\n<p>Or if you are using <strong>pnpm</strong>:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> --save-dev @lingual/i18n-check</code></pre>\n<p><code>i18n-check</code> can either be accessed via defining a command in the <code>package.json</code> file or directly in the CLI after running the installation command.</p>\n<p>Now update the <code>package.json</code> file and add a new command:</p>\n<pre class=\"language-json\" tabindex=\"0\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...other commands,</span>\n    <span class=\"token property\">\"i18n:check\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"i18n-check\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Run the <code>i18n:check</code> command directly from the command-line, i.e. <code>yarn i18n:check</code>.</p>\n<p>Alternatively you can also access the library directly:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">node_modules/.bin/i18n-check</code></pre>\n<h2 id=\"checking-against-your-files\" tabindex=\"-1\">Checking against your files <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/introducing-i18n-check/\">#</a></h2>\n<p>Once you have everything set up, you can run <code>check</code> commands against single files, single folders or a combination of files and folders. There are a number of possible check scenarios and these depend on how the localization files are structured in your codebase.</p>\n<p>To keep this post short, let's take a look at two possible scenarios (there are more advanced scenarios in the <a href=\"https://github.com/lingualdev/i18n-check?tab=readme-ov-file#examples\">README</a>). A basic setup could include a folder called <em>locales</em> containing a number of translation files organized as <code>en-en.json</code>, <code>fr-fr.json</code>, <code>it-it.json</code> etc:</p>\n<ul>\n<li>locales/\n<ul>\n<li>en-en.json</li>\n<li>fr-fr.json</li>\n<li>it-it.json</li>\n</ul>\n</li>\n</ul>\n<p>You can use the <code>-t</code> or <code>--target</code> option to define the directory that contains the target files and with the <code>-s</code> or <code>--source</code> option you can specify the base/reference file to compare the target files against.</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> i18n:check <span class=\"token parameter variable\">-t</span> locales <span class=\"token parameter variable\">-s</span> locales/en-en.json</code></pre>\n<p>In the above scenario the <code>i18n-check</code> will compare the <code>fr-fr.json</code> and <code>it-it.json</code> file against the <code>en-en.json</code> file and check for any missing or broken keys. Running the above command might return the following result:</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://www.lingual.dev/img/PIE2-IvB7z-1221.avif 1221w\"><source type=\"image/webp\" srcset=\"https://www.lingual.dev/img/PIE2-IvB7z-1221.webp 1221w\"><img alt=\"lingual-i18n-check example 1\" loading=\"lazy\" decoding=\"async\" src=\"https://www.lingual.dev/img/PIE2-IvB7z-1221.png\" width=\"1221\" height=\"588\"></picture></p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">i18n translations checker\nSource file<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>: locales/en-en.json\n\nFound missing keys<span class=\"token operator\">!</span>\n\nIn locales/fr-fr.json:\n\n◯ richText\n◯ yo\n◯ nesting1\n◯ nesting2\n◯ nesting3\n◯ key1\n\nFound invalid keys<span class=\"token operator\">!</span>\n\nIn locales/it-it.json:\n\n◯ multipleVariables\n\nDone <span class=\"token keyword\">in</span> <span class=\"token number\">0</span>.01s.</code></pre>\n<p>You can also use the <code>-r</code> or <code>--reporter</code> option to see a summary of the check instead of single keys, this is especially useful if you do not want to list all the keys:</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://www.lingual.dev/img/tIHotYuKhg-1222.avif 1222w\"><source type=\"image/webp\" srcset=\"https://www.lingual.dev/img/tIHotYuKhg-1222.webp 1222w\"><img alt=\"lingual-i18n-check example 2\" loading=\"lazy\" decoding=\"async\" src=\"https://www.lingual.dev/img/tIHotYuKhg-1222.png\" width=\"1222\" height=\"499\"></picture></p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">i18n translations checker\nSource file<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>: locales/en-en.json\n\nFound missing keys<span class=\"token operator\">!</span>\n\nIn locales/fr-fr.json:\n\nFound <span class=\"token number\">6</span> missing keys.\n\nFound invalid keys<span class=\"token operator\">!</span>\n\nIn locales/it-it.json:\n\nFound <span class=\"token number\">1</span> invalid key.\n\nDone <span class=\"token keyword\">in</span> <span class=\"token number\">0</span>.01s.</code></pre>\n<p>Your files might also be organized as one folder per locale, similar to this:</p>\n<ul>\n<li>locales/\n<ul>\n<li>en-US/\n<ul>\n<li>one.json</li>\n<li>two.json</li>\n<li>three.json</li>\n</ul>\n</li>\n<li>de-DE/\n<ul>\n<li>one.json</li>\n<li>two.json</li>\n<li>three.json</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>For this scenario you can define the <code>locales</code> folder as the <code>target</code> directory to look for target files in and pass <code>locales/en-US/</code> as the <code>source</code> option. <code>i18n-check</code> will try to collect all the files in the provided base directory and compare each one against the corresponding files in the target locales.</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> i18n:check <span class=\"token parameter variable\">-t</span> locales <span class=\"token parameter variable\">-s</span> locales/en-US/</code></pre>\n<p>The above command would then compare the <code>locales/de-DE/one.json</code> with the <code>locales/en-US/one.json</code> and check for any missing or invalid keys.</p>\n<p>If you your localization setup is different to the two shown examples, you can check the <a href=\"https://github.com/lingualdev/i18n-check?tab=readme-ov-file#examples\">examples section in the README</a> for more advanced scenarios.</p>\n<p>There are also a number of further <strong>options</strong> you can use to configure the check even further. For example you can only check for missing keys or only check for broken/invalid translations via the <code>--check</code> option.</p>\n<p>There are situations where we want to exclude specific files or folders: this can be done via the <code>--exclude</code> option. For a more detailed explanation of the available options consult the <a href=\"https://github.com/lingualdev/i18n-check?tab=readme-ov-file#options\">options section in the README</a></p>\n<h2 id=\"usage\" tabindex=\"-1\">Usage <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/introducing-i18n-check/\">#</a></h2>\n<p>There are multiple ways to incorporate <code>i18n-check</code> into your existing workflow. You can run the checks manually on the <strong>CLI</strong> or add it as <strong>pre-commit hook</strong>. Further more you can also let it run on the <strong>CI</strong>, the following is an example of how you could define the Github workflow:</p>\n<pre class=\"language-yml\" tabindex=\"0\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> i18n Check\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> main\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> main\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">i18n-check</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@master\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> yarn install &amp; build\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          yarn install\n          yarn build</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> yarn i18n<span class=\"token punctuation\">-</span>check\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          yarn i18n-check -t translations/messageExamples -s translations/messageExamples/en-us.json</span></code></pre>\n<p><code>i18n-check</code> also offers an <strong>API</strong> you can directly use if you want to trigger these checks programmatically or if you want to build your own wrapper around the checks.</p>\n<h2 id=\"summary\" tabindex=\"-1\">Summary <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/introducing-i18n-check/\">#</a></h2>\n<p>This is the initial release of <code>i18n-check</code> and we have some more plans, including creating a <strong>VS Code plugin</strong>, so you can run the checks directly inside your IDE and even get some visual feedback on the state of your translations.</p>\n<p>Currently the checks only cover <code>icu</code> and <code>i18next</code> messages, adding <code>gettext</code> file checks is another todo we are planning to work on.</p>\n<p>Aside from the aforementioned, we will try to fix any missing scenarios in regards to real world localization setups. We encourage to give <code>i18n-check</code> a try and see if the checks can help improve your localization efforts, especially if you are not using a third party SaaS solution for the translation part (as these often come with helpful information in regards to the state of your localization efforts).</p>\n<p>Checkout <code>i18n-check</code> <a href=\"https://github.com/lingualdev/i18n-check\">here</a></p>\n<h2 id=\"links\" tabindex=\"-1\">Links <a class=\"header-anchor\" href=\"https://www.lingual.dev/blog/introducing-i18n-check/\">#</a></h2>\n<p><a href=\"https://github.com/lingualdev/i18n-check\">i18n-check</a></p>\n<p><a href=\"https://twitter.com/lingualdev\">Twitter</a></p>\n",
			"date_published": "2024-06-18T00:00:00Z"
		}
		
	]
}
